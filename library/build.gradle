apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'


group = rootProject.ext.packageName
version = rootProject.ext.libraryVersionName

// Local aar info
install {
    repositories.mavenInstaller {
        pom.project {
            name project.name
            description rootProject.ext.description
            url rootProject.ext.websiteUrl
            inceptionYear '2017' // release date

            packaging 'aar'
            groupId rootProject.ext.packageName
            artifactId 'simple-indicator'
            version rootProject.ext.libraryVersionName

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            scm { // Optional setting
                connection rootProject.ext.gitHubRepoUrl
                developerConnection rootProject.ext.gitHubRepoUrl
                url rootProject.ext.websiteUrl
            }

            developers { // Optional setting
                developer {
                    id 'PM10'
                    name 'PM10'
                    email 'show9114@gmail.com'
                }
            }
        }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.get('user')
    key = properties.get("key")

    configurations = ['archives']

    publish = true

    pkg {
        repo = 'SimpleIndicator'
        name = 'simple-indicator'
        userOrg = user
        // An optional organization name when the repo belongs to one of the user's orgs
        desc = 'ViewPager SimpleIndicator' // Optional
        licenses = ['Apache-2.0']

        vcsUrl = rootProject.ext.gitHubRepoUrl
        websiteUrl = rootProject.ext.websiteUrl
        // issueTrackerUrl = '' // Optional

        publicDownloadNumbers = true

        githubRepo = rootProject.ext.githubRepo // Optional Github repository
        githubReleaseNotesFile = rootProject.ext.githubReleaseNotesFile
        // Optional Github readme file

        version {
            name = rootProject.ext.libraryVersionName // The name of your library project
            desc = rootProject.ext.description // Optional - Version-specific description'
            released = new Date()
            // Optional - Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            vcsTag = rootProject.ext.libraryVersionName
        }
    }
}
// Bintray setting end


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.libraryVersionName

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile rootProject.ext.appCompat
}

// JCenter publish
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

// Optional docs
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

// Optional javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
//    archives javadocJar // Optional
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}